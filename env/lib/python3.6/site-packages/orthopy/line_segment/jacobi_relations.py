# -*- coding: utf-8 -*-
#
import numpy
import sympy


def _n3(n, a, b, x):
    '''Recurrence coefficients for n-1, n, n+11 (a, b all equal).
    '''
    return {
        (n-1, a, b): +2 * (n+a) * (n+b) * (2*n+a+b+2),
        (n, a, b): -(2*n+a+b+1) * (a**2 - b**2 + x*(2*n+a+b)*(2*n+a+b+2)),
        (n+1, a, b): +2 * (n+1) * (n+a+b+1) * (2*n+a+b),
        }


def jacobi_relations(p0, p1, p2):
    a = sympy.Symbol('a')
    b = sympy.Symbol('b')
    n = sympy.Symbol('n')
    x = sympy.Symbol('x')

    c0 = _n3(n, a, b, x)

    # generate n-1, n, n+2 rule
    # multiply and such up such that the n+1 term vanishes
    c1 = _n3(n+1, a, b, x)
    c0s = {key: c1[(n+1, a, b)]*val for key, val in c0.items()}
    c1s = {key: -c0[(n+1, a, b)]*val for key, val in c1.items()}

    assert c0s[(n+1, a, b)] + c1s[(n+1, a, b)] == 0

    # This is the rule for n-1, n, n+2
    res = {
        (n-1, a, b): c0s[(n-1, a, b)],
        (n, a, b): c0s[(n, a, b)] + c1s[(n, a, b)],
        (n+2, a, b): c1s[(n+2, a, b)],
        }

    assert p0 == (-1, 0, 0)
    assert p1 == (+0, 0, 0)
    assert p2 == (+2, 0, 0)
    return res
    # res /= sympy.gcd(res)

    # generate n-2, n, n+1 rule
    # multiply and such up such that the n+1 term vanishes
    c1 = _n3(n-1, a, b, x)
    c0s = c0 * c1[1]
    c1s = c1 * (-c0[0])

    assert c0s[0] + c1s[1] == 0

    # This is the rule for n-2, n, n+1
    res2 = numpy.array([
        sympy.simplify(c1s[0]),
        sympy.simplify(c0s[1] + c1s[2]),
        sympy.simplify(c0s[2])
        ])

    print(res2)
    exit(1)

    # generate n-1, n, n+3 rule
    return


if __name__ == '__main__':
    _main()
